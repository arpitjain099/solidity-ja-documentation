# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2023, The Solidity Authors
# This file is distributed under the same license as the Solidity package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Solidity 0.8.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-18 04:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja_JP\n"
"Language-Team: ja_JP <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../layout-of-source-files.rst:3 128817e9c60c42ea9855a00fff69d475
msgid "Layout of a Solidity Source File"
msgstr ""

#: ../../layout-of-source-files.rst:5 6bafa6aeef3040a6b15bc85947c1df10
msgid ""
"Source files can contain an arbitrary number of :ref:`contract "
"definitions<contract_structure>`, import_ , :ref:`pragma<pragma>` and "
":ref:`using for<using-for>` directives and :ref:`struct<structs>`, "
":ref:`enum<enums>`, :ref:`function<functions>`, :ref:`error<errors>` and "
":ref:`constant variable<constants>` definitions."
msgstr ""

#: ../../layout-of-source-files.rst:14 5534a114fa72492aa8a3e1a32002fea7
msgid "SPDX License Identifier"
msgstr ""

#: ../../layout-of-source-files.rst:16 150ed18a75c24aa0ad226bcdfbaea2ef
msgid ""
"Trust in smart contracts can be better established if their source code "
"is available. Since making source code available always touches on legal "
"problems with regards to copyright, the Solidity compiler encourages the "
"use of machine-readable `SPDX license identifiers <https://spdx.org>`_. "
"Every source file should start with a comment indicating its license:"
msgstr ""

#: ../../layout-of-source-files.rst:22 9231af1af2a24ecd9abcd58b4f5092d6
msgid "``// SPDX-License-Identifier: MIT``"
msgstr ""

#: ../../layout-of-source-files.rst:24 f40d96a7cfa24dcea63603267ee6a879
msgid ""
"The compiler does not validate that the license is part of the `list "
"allowed by SPDX <https://spdx.org/licenses/>`_, but it does include the "
"supplied string in the :ref:`bytecode metadata <metadata>`."
msgstr ""

#: ../../layout-of-source-files.rst:28 ce9d50cddb73483d93cee52d969fdea0
msgid ""
"If you do not want to specify a license or if the source code is not "
"open-source, please use the special value ``UNLICENSED``. Note that "
"``UNLICENSED`` (no usage allowed, not present in SPDX license list) is "
"different from ``UNLICENSE`` (grants all rights to everyone). Solidity "
"follows `the npm recommendation <https://docs.npmjs.com/cli/v7"
"/configuring-npm/package-json#license>`_."
msgstr ""

#: ../../layout-of-source-files.rst:34 6e7895b9c7174ea2af4ccce50f4f018f
msgid ""
"Supplying this comment of course does not free you from other obligations"
" related to licensing like having to mention a specific license header in"
" each source file or the original copyright holder."
msgstr ""

#: ../../layout-of-source-files.rst:39 ce9ca1293fa2490da33c44a92b056a32
msgid ""
"The comment is recognized by the compiler anywhere in the file at the "
"file level, but it is recommended to put it at the top of the file."
msgstr ""

#: ../../layout-of-source-files.rst:42 88a95d0adb364816bca8ea0ca8f2ea13
msgid ""
"More information about how to use SPDX license identifiers can be found "
"at the `SPDX website <https://spdx.org/ids-how>`_."
msgstr ""

#: ../../layout-of-source-files.rst:51 36ff9c2f64b94ae0a60370959f8d5cf5
msgid "Pragmas"
msgstr ""

#: ../../layout-of-source-files.rst:53 3d24d9b69406482aa5bf347655728893
msgid ""
"The ``pragma`` keyword is used to enable certain compiler features or "
"checks. A pragma directive is always local to a source file, so you have "
"to add the pragma to all your files if you want to enable it in your "
"whole project. If you :ref:`import<import>` another file, the pragma from"
" that file does *not* automatically apply to the importing file."
msgstr ""

#: ../../layout-of-source-files.rst:64 222f964136eb4319ab9a5de937aa61a3
msgid "Version Pragma"
msgstr ""

#: ../../layout-of-source-files.rst:66 e5575f24057e4803b9b6e174d0bd267e
msgid ""
"Source files can (and should) be annotated with a version pragma to "
"reject compilation with future compiler versions that might introduce "
"incompatible changes. We try to keep these to an absolute minimum and "
"introduce them in a way that changes in semantics also require changes in"
" the syntax, but this is not always possible. Because of this, it is "
"always a good idea to read through the changelog at least for releases "
"that contain breaking changes. These releases always have versions of the"
" form ``0.x.0`` or ``x.0.0``."
msgstr ""

#: ../../layout-of-source-files.rst:75 25c41816125c4a4392e8bfa0dc992a46
msgid "The version pragma is used as follows: ``pragma solidity ^0.5.2;``"
msgstr ""

#: ../../layout-of-source-files.rst:77 f7df3ebcb5324520b09fb0b0a3ed0e0e
msgid ""
"A source file with the line above does not compile with a compiler "
"earlier than version 0.5.2, and it also does not work on a compiler "
"starting from version 0.6.0 (this second condition is added by using "
"``^``). Because there will be no breaking changes until version "
"``0.6.0``, you can be sure that your code compiles the way you intended. "
"The exact version of the compiler is not fixed, so that bugfix releases "
"are still possible."
msgstr ""

#: ../../layout-of-source-files.rst:84 30d98f173e974d7b94e7cf3fa778292f
msgid ""
"It is possible to specify more complex rules for the compiler version, "
"these follow the same syntax used by `npm <https://docs.npmjs.com/cli/v6"
"/using-npm/semver>`_."
msgstr ""

#: ../../layout-of-source-files.rst:88 db5439d7e11849ebab2bb4f3e9ba0cf9
msgid ""
"Using the version pragma *does not* change the version of the compiler. "
"It also *does not* enable or disable features of the compiler. It just "
"instructs the compiler to check whether its version matches the one "
"required by the pragma. If it does not match, the compiler issues an "
"error."
msgstr ""

#: ../../layout-of-source-files.rst:98 1b7ca8573066434cb33c884f800f823d
msgid "ABI Coder Pragma"
msgstr ""

#: ../../layout-of-source-files.rst:100 c8791bb4e0084d63a4d5ff2ae26764c1
msgid ""
"By using ``pragma abicoder v1`` or ``pragma abicoder v2`` you can select "
"between the two implementations of the ABI encoder and decoder."
msgstr ""

#: ../../layout-of-source-files.rst:103 20e0675a4ca44388b8ddd6df0eb3610c
msgid ""
"The new ABI coder (v2) is able to encode and decode arbitrarily nested "
"arrays and structs. Apart from supporting more types, it involves more "
"extensive validation and safety checks, which may result in higher gas "
"costs, but also heightened security. It is considered non-experimental as"
" of Solidity 0.6.0 and it is enabled by default starting with Solidity "
"0.8.0. The old ABI coder can still be selected using ``pragma abicoder "
"v1;``."
msgstr ""

#: ../../layout-of-source-files.rst:110 a0cd4ad8edaa401ba3f544a17f61d40a
msgid ""
"The set of types supported by the new encoder is a strict superset of the"
" ones supported by the old one. Contracts that use it can interact with "
"ones that do not without limitations. The reverse is possible only as "
"long as the non-``abicoder v2`` contract does not try to make calls that "
"would require decoding types only supported by the new encoder. The "
"compiler can detect this and will issue an error. Simply enabling "
"``abicoder v2`` for your contract is enough to make the error go away."
msgstr ""

#: ../../layout-of-source-files.rst:119 e58fc46a016c44999ef4404057b0b32c
msgid ""
"This pragma applies to all the code defined in the file where it is "
"activated, regardless of where that code ends up eventually. This means "
"that a contract whose source file is selected to compile with ABI coder "
"v1 can still contain code that uses the new encoder by inheriting it from"
" another contract. This is allowed if the new types are only used "
"internally and not in external function signatures."
msgstr ""

#: ../../layout-of-source-files.rst:127 dd09f2c6e2b14bd2bb622db8920433ea
msgid ""
"Up to Solidity 0.7.4, it was possible to select the ABI coder v2 by using"
" ``pragma experimental ABIEncoderV2``, but it was not possible to "
"explicitly select coder v1 because it was the default."
msgstr ""

#: ../../layout-of-source-files.rst:135 158c53bdfd0e4414a5197d2b19af6319
msgid "Experimental Pragma"
msgstr ""

#: ../../layout-of-source-files.rst:137 71b1988105a5470d9df3a8583eecf36b
msgid ""
"The second pragma is the experimental pragma. It can be used to enable "
"features of the compiler or language that are not yet enabled by default."
" The following experimental pragmas are currently supported:"
msgstr ""

#: ../../layout-of-source-files.rst:144 46bad5f36259405bb06d1478d1ef564d
msgid "ABIEncoderV2"
msgstr ""

#: ../../layout-of-source-files.rst:146 55cc5bc3ba434165abd975098b0b997c
msgid ""
"Because the ABI coder v2 is not considered experimental anymore, it can "
"be selected via ``pragma abicoder v2`` (please see above) since Solidity "
"0.7.4."
msgstr ""

#: ../../layout-of-source-files.rst:154 c521987368424cc8adba54a98ecd3cc9
msgid "SMTChecker"
msgstr ""

#: ../../layout-of-source-files.rst:156 a3dd48e1d65b458c9af4502537d144f6
msgid ""
"This component has to be enabled when the Solidity compiler is built and "
"therefore it is not available in all Solidity binaries. The :ref:`build "
"instructions<smt_solvers_build>` explain how to activate this option. It "
"is activated for the Ubuntu PPA releases in most versions, but not for "
"the Docker images, Windows binaries or the statically-built Linux "
"binaries. It can be activated for solc-js via the `smtCallback "
"<https://github.com/ethereum/solc-js#example-usage-with-smtsolver-"
"callback>`_ if you have an SMT solver installed locally and run solc-js "
"via node (not via the browser)."
msgstr ""

#: ../../layout-of-source-files.rst:165 e8998f334588467dbb090fa3d35d3d05
msgid ""
"If you use ``pragma experimental SMTChecker;``, then you get additional "
":ref:`safety warnings<formal_verification>` which are obtained by "
"querying an SMT solver. The component does not yet support all features "
"of the Solidity language and likely outputs many warnings. In case it "
"reports unsupported features, the analysis may not be fully sound."
msgstr ""

#: ../../layout-of-source-files.rst:177 9ec8b8174c834dd4b0d4eb79ae206e05
msgid "Importing other Source Files"
msgstr ""

#: ../../layout-of-source-files.rst:180 b976ca98e8f749b0b18060dcc45c8027
msgid "Syntax and Semantics"
msgstr ""

#: ../../layout-of-source-files.rst:182 ce2b9fa9f2734af0a33325bf1b3bc677
msgid ""
"Solidity supports import statements to help modularise your code that are"
" similar to those available in JavaScript (from ES6 on). However, "
"Solidity does not support the concept of a `default export "
"<https://developer.mozilla.org/en-"
"US/docs/web/javascript/reference/statements/export#description>`_."
msgstr ""

#: ../../layout-of-source-files.rst:187 316b64fc4ad9452ba9114d2f20ebd1b1
msgid "At a global level, you can use import statements of the following form:"
msgstr ""

#: ../../layout-of-source-files.rst:193 506b363588b74f1499ea045dd5b58f1f
msgid ""
"The ``filename`` part is called an *import path*. This statement imports "
"all global symbols from \"filename\" (and symbols imported there) into "
"the current global scope (different than in ES6 but backwards-compatible "
"for Solidity). This form is not recommended for use, because it "
"unpredictably pollutes the namespace. If you add new top-level items "
"inside \"filename\", they automatically appear in all files that import "
"like this from \"filename\". It is better to import specific symbols "
"explicitly."
msgstr ""

#: ../../layout-of-source-files.rst:201 652aea9f4ff04584890f188ad1aa1a58
msgid ""
"The following example creates a new global symbol ``symbolName`` whose "
"members are all the global symbols from ``\"filename\"``:"
msgstr ""

#: ../../layout-of-source-files.rst:208 e12599879fb44090bfd09efc8ff5eb01
msgid ""
"which results in all global symbols being available in the format "
"``symbolName.symbol``."
msgstr ""

#: ../../layout-of-source-files.rst:210 ab2f56ae32894414b191598ee2f93954
msgid "A variant of this syntax that is not part of ES6, but possibly useful is:"
msgstr ""

#: ../../layout-of-source-files.rst:216 2f6ccb2db5f44e17b891cde2938d74bf
msgid "which is equivalent to ``import * as symbolName from \"filename\";``."
msgstr ""

#: ../../layout-of-source-files.rst:218 51815d3286574e278d76ab664ebe7c7e
msgid ""
"If there is a naming collision, you can rename symbols while importing. "
"For example, the code below creates new global symbols ``alias`` and "
"``symbol2`` which reference ``symbol1`` and ``symbol2`` from inside "
"``\"filename\"``, respectively."
msgstr ""

#: ../../layout-of-source-files.rst:229 8b54b88bc74f4076a5f22a5c49ccd070
msgid "Import Paths"
msgstr ""

#: ../../layout-of-source-files.rst:231 70156208fee445fab3db6c9b999a984b
msgid ""
"In order to be able to support reproducible builds on all platforms, the "
"Solidity compiler has to abstract away the details of the filesystem "
"where source files are stored. For this reason import paths do not refer "
"directly to files in the host filesystem. Instead the compiler maintains "
"an internal database (*virtual filesystem* or *VFS* for short) where each"
" source unit is assigned a unique *source unit name* which is an opaque "
"and unstructured identifier. The import path specified in an import "
"statement is translated into a source unit name and used to find the "
"corresponding source unit in this database."
msgstr ""

#: ../../layout-of-source-files.rst:239 77d2ed661f0040b09dd75045320e0d8d
msgid ""
"Using the :ref:`Standard JSON <compiler-api>` API it is possible to "
"directly provide the names and content of all the source files as a part "
"of the compiler input. In this case source unit names are truly "
"arbitrary. If, however, you want the compiler to automatically find and "
"load source code into the VFS, your source unit names need to be "
"structured in a way that makes it possible for an :ref:`import callback "
"<import-callback>` to locate them. When using the command-line compiler "
"the default import callback supports only loading source code from the "
"host filesystem, which means that your source unit names must be paths. "
"Some environments provide custom callbacks that are more versatile. For "
"example the `Remix IDE <https://remix.ethereum.org/>`_ provides one that "
"lets you `import files from HTTP, IPFS and Swarm URLs or refer directly "
"to packages in NPM registry <https://remix-"
"ide.readthedocs.io/en/latest/import.html>`_."
msgstr ""

#: ../../layout-of-source-files.rst:252 140a6df5133b44ddbda3c7de13104a4f
msgid ""
"For a complete description of the virtual filesystem and the path "
"resolution logic used by the compiler see :ref:`Path Resolution <path-"
"resolution>`."
msgstr ""

#: ../../layout-of-source-files.rst:258 231ec635e9bb4d8fb0c56ba5c9a6c53c
msgid "Comments"
msgstr ""

#: ../../layout-of-source-files.rst:260 0df68c43998743ec9b0d02fd4ea530c1
msgid ""
"Single-line comments (``//``) and multi-line comments (``/*...*/``) are "
"possible."
msgstr ""

#: ../../layout-of-source-files.rst:272 6b9519314f1a44838ea28eb8bb8b5d4b
msgid ""
"A single-line comment is terminated by any unicode line terminator (LF, "
"VF, FF, CR, NEL, LS or PS) in UTF-8 encoding. The terminator is still "
"part of the source code after the comment, so if it is not an ASCII "
"symbol (these are NEL, LS and PS), it will lead to a parser error."
msgstr ""

#: ../../layout-of-source-files.rst:277 97b35664a73744c6ba1590424ab6f5db
msgid ""
"Additionally, there is another type of comment called a NatSpec comment, "
"which is detailed in the :ref:`style guide<style_guide_natspec>`. They "
"are written with a triple slash (``///``) or a double asterisk block "
"(``/** ... */``) and they should be used directly above function "
"declarations or statements."
msgstr ""

