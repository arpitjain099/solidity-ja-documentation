# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2023, The Solidity Authors
# This file is distributed under the same license as the Solidity package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Solidity 0.8.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-18 04:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja_JP\n"
"Language-Team: ja_JP <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../analysing-compilation-output.rst:5 969a5b5ff7fe46bebb4635f90737439e
msgid "Analysing the Compiler Output"
msgstr ""

#: ../../analysing-compilation-output.rst:7 57e4b23df8b34940accd33c995adde78
msgid ""
"It is often useful to look at the assembly code generated by the "
"compiler. The generated binary, i.e., the output of ``solc --bin "
"contract.sol``, is generally difficult to read. It is recommended to use "
"the flag ``--asm`` to analyse the assembly output. Even for large "
"contracts, looking at a visual diff of the assembly before and after a "
"change is often very enlightening."
msgstr ""

#: ../../analysing-compilation-output.rst:12 39c1b8a40dbf4c3fa4a0637f6a0c3eb4
msgid "Consider the following contract (named, say ``contract.sol``):"
msgstr ""

#: ../../analysing-compilation-output.rst:24 b2aa07aad34841f49ba4da1a2bce3d76
msgid "The following would be the output of ``solc --asm contract.sol``"
msgstr ""

#: ../../analysing-compilation-output.rst:172 1fca64d2ab4347b882b9df1ca9018dc5
msgid ""
"Alternatively, the above output can also be obtained from `Remix "
"<https://remix.ethereum.org/>`_, under the option \"Compilation Details\""
" after compiling a contract."
msgstr ""

#: ../../analysing-compilation-output.rst:175 64b94520dfbe4b3cb13eb32d76341438
msgid ""
"Notice that the ``asm`` output starts with the creation / constructor "
"code. The deploy code is provided as part of the sub object (in the above"
" example, it is part of the sub-object ``sub_0``). The ``auxdata`` field "
"corresponds to the contract :ref:`metadata <encoding-of-the-metadata-"
"hash-in-the-bytecode>`. The comments in the assembly output point to the "
"source location. Note that ``#utility.yul`` is an internally generated "
"file of utility functions that can be obtained using the flags "
"``--combined-json generated-sources,generated-sources-runtime``."
msgstr ""

#: ../../analysing-compilation-output.rst:183 36667fe1ecd444d29446395c7c0e6d18
msgid ""
"Similarly, the optimized assembly can be obtained with the command: "
"``solc --optimize --asm contract.sol``. Often times, it is interesting to"
" see if two different sources in Solidity result in the same optimized "
"code. For example, to see if the expressions ``(a * b) / c``, ``a * b / "
"c`` generates the same bytecode. This can be easily done by taking a "
"``diff`` of the corresponding assembly output, after potentially "
"stripping comments that reference the source locations."
msgstr ""

#: ../../analysing-compilation-output.rst:191 4fa0353fd26148ac9e802c45f07388e8
msgid ""
"The ``--asm`` output is not designed to be machine readable. Therefore, "
"there may be breaking changes on the output between minor versions of "
"solc."
msgstr ""

