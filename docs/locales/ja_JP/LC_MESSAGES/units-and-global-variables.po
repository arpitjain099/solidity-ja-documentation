# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2023, The Solidity Authors
# This file is distributed under the same license as the Solidity package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Solidity 0.8.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-18 04:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja_JP\n"
"Language-Team: ja_JP <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../units-and-global-variables.rst:3 7d76c752dc44427d83d46f235fc87cf3
msgid "Units and Globally Available Variables"
msgstr ""

#: ../../units-and-global-variables.rst:8 46d6143194cb4a1cb7f0bf2f169dd3fa
msgid "Ether Units"
msgstr ""

#: ../../units-and-global-variables.rst:10 999a16b90f6141d98ed1eb278c840173
msgid ""
"A literal number can take a suffix of ``wei``, ``gwei`` or ``ether`` to "
"specify a subdenomination of Ether, where Ether numbers without a postfix"
" are assumed to be Wei."
msgstr ""

#: ../../units-and-global-variables.rst:19 274305b9dcfc4773b064efbd9b119705
msgid ""
"The only effect of the subdenomination suffix is a multiplication by a "
"power of ten."
msgstr ""

#: ../../units-and-global-variables.rst:22 9b67a74f730248279f9b30f42f9a8ac7
msgid ""
"The denominations ``finney`` and ``szabo`` have been removed in version "
"0.7.0."
msgstr ""

#: ../../units-and-global-variables.rst:27 29f47ef861cc4ad684b81ff561f5ae1e
msgid "Time Units"
msgstr ""

#: ../../units-and-global-variables.rst:29 fc77d9066e7543c2a7e6d0481681591d
msgid ""
"Suffixes like ``seconds``, ``minutes``, ``hours``, ``days`` and ``weeks``"
" after literal numbers can be used to specify units of time where seconds"
" are the base unit and units are considered naively in the following way:"
msgstr ""

#: ../../units-and-global-variables.rst:33 032b13cdf33845c6b821a1e40ac13a62
msgid "``1 == 1 seconds``"
msgstr ""

#: ../../units-and-global-variables.rst:34 b1eae0d01a5d42ebad597c79fd442db9
msgid "``1 minutes == 60 seconds``"
msgstr ""

#: ../../units-and-global-variables.rst:35 77f901c6c58442c682de62dbde960a2d
msgid "``1 hours == 60 minutes``"
msgstr ""

#: ../../units-and-global-variables.rst:36 e4d2b141cf15405c81c9701781645028
msgid "``1 days == 24 hours``"
msgstr ""

#: ../../units-and-global-variables.rst:37 edcecc104e6e431d94afc67ba91dac69
msgid "``1 weeks == 7 days``"
msgstr ""

#: ../../units-and-global-variables.rst:39 ba78afec8a4449f4b29121349caa8c72
msgid ""
"Take care if you perform calendar calculations using these units, because"
" not every year equals 365 days and not even every day has 24 hours "
"because of `leap seconds <https://en.wikipedia.org/wiki/Leap_second>`_. "
"Due to the fact that leap seconds cannot be predicted, an exact calendar "
"library has to be updated by an external oracle."
msgstr ""

#: ../../units-and-global-variables.rst:46 345ebd3947794d84932b48b615a07441
msgid ""
"The suffix ``years`` has been removed in version 0.5.0 due to the reasons"
" above."
msgstr ""

#: ../../units-and-global-variables.rst:48 69618240d1814da8aa5e874539579e85
msgid ""
"These suffixes cannot be applied to variables. For example, if you want "
"to interpret a function parameter in days, you can in the following way:"
msgstr ""

#: ../../units-and-global-variables.rst:62 0adbdbb209464704a22cc09ac2c5123c
msgid "Special Variables and Functions"
msgstr ""

#: ../../units-and-global-variables.rst:64 e19aafc79ac841039869e1d44ed5176e
msgid ""
"There are special variables and functions which always exist in the "
"global namespace and are mainly used to provide information about the "
"blockchain or are general-use utility functions."
msgstr ""

#: ../../units-and-global-variables.rst:72 29e23fa637d94fada747bcf49f555765
msgid "Block and Transaction Properties"
msgstr ""

#: ../../units-and-global-variables.rst:74 18ed0a00f2d74017bf9265e5953dfdf4
msgid ""
"``blockhash(uint blockNumber) returns (bytes32)``: hash of the given "
"block when ``blocknumber`` is one of the 256 most recent blocks; "
"otherwise returns zero"
msgstr ""

#: ../../units-and-global-variables.rst:75 5fb751ac98a94b678149c1baaaae12ec
msgid ""
"``block.basefee`` (``uint``): current block's base fee (`EIP-3198 "
"<https://eips.ethereum.org/EIPS/eip-3198>`_ and `EIP-1559 "
"<https://eips.ethereum.org/EIPS/eip-1559>`_)"
msgstr ""

#: ../../units-and-global-variables.rst:76 d39526a861954220abb7d6c68ae47972
msgid "``block.chainid`` (``uint``): current chain id"
msgstr ""

#: ../../units-and-global-variables.rst:77 e039dc199e974ba58c2e2f11603fbcfc
msgid "``block.coinbase`` (``address payable``): current block miner's address"
msgstr ""

#: ../../units-and-global-variables.rst:78 2425d11e87334f7cb733b01def780eb6
msgid ""
"``block.difficulty`` (``uint``): current block difficulty (``EVM < "
"Paris``). For other EVM versions it behaves as a deprecated alias for "
"``block.prevrandao`` (`EIP-4399 "
"<https://eips.ethereum.org/EIPS/eip-4399>`_ )"
msgstr ""

#: ../../units-and-global-variables.rst:79 54d857a5cd7c4f8ebf99d86ad068f9bb
msgid "``block.gaslimit`` (``uint``): current block gaslimit"
msgstr ""

#: ../../units-and-global-variables.rst:80 841417db51164e2bba888915bc662d9a
msgid "``block.number`` (``uint``): current block number"
msgstr ""

#: ../../units-and-global-variables.rst:81 88be6954cce24a229cd3de83e4d131c7
msgid ""
"``block.prevrandao`` (``uint``): random number provided by the beacon "
"chain (``EVM >= Paris``)"
msgstr ""

#: ../../units-and-global-variables.rst:82 e414d7dc09d34a7cbf752868801b5b17
msgid ""
"``block.timestamp`` (``uint``): current block timestamp as seconds since "
"unix epoch"
msgstr ""

#: ../../units-and-global-variables.rst:83 56b83d0d658e4604aa5dfd1e1f578fa0
msgid "``gasleft() returns (uint256)``: remaining gas"
msgstr ""

#: ../../units-and-global-variables.rst:84 cf336cb342804cb3b81d8aec37b6812b
msgid "``msg.data`` (``bytes calldata``): complete calldata"
msgstr ""

#: ../../units-and-global-variables.rst:85 f12bd173c137470795913e7651d98d05
msgid "``msg.sender`` (``address``): sender of the message (current call)"
msgstr ""

#: ../../units-and-global-variables.rst:86 e5cee8cc76e94dfd9ba63e4a25a19e34
msgid ""
"``msg.sig`` (``bytes4``): first four bytes of the calldata (i.e. function"
" identifier)"
msgstr ""

#: ../../units-and-global-variables.rst:87 0168c70ebfa349cba5cafc78a661f13f
msgid "``msg.value`` (``uint``): number of wei sent with the message"
msgstr ""

#: ../../units-and-global-variables.rst:88 7869a9c8d9c54e4b95552a372963e2e2
msgid "``tx.gasprice`` (``uint``): gas price of the transaction"
msgstr ""

#: ../../units-and-global-variables.rst:89 e06c64c86c204faca49cb91e4b5038c7
msgid "``tx.origin`` (``address``): sender of the transaction (full call chain)"
msgstr ""

#: ../../units-and-global-variables.rst:92 eb58566112454ab4b8f37f49a828c9c5
msgid ""
"The values of all members of ``msg``, including ``msg.sender`` and "
"``msg.value`` can change for every **external** function call. This "
"includes calls to library functions."
msgstr ""

#: ../../units-and-global-variables.rst:97 aa12d53e7e02491197fad42d90994e18
msgid ""
"When contracts are evaluated off-chain rather than in context of a "
"transaction included in a block, you should not assume that ``block.*`` "
"and ``tx.*`` refer to values from any specific block or transaction. "
"These values are provided by the EVM implementation that executes the "
"contract and can be arbitrary."
msgstr ""

#: ../../units-and-global-variables.rst:103 2c872f5f0b8d4854b270c78377f9c651
msgid ""
"Do not rely on ``block.timestamp`` or ``blockhash`` as a source of "
"randomness, unless you know what you are doing."
msgstr ""

#: ../../units-and-global-variables.rst:106 5cc013579de24cd89bbb6ec728b17bcf
msgid ""
"Both the timestamp and the block hash can be influenced by miners to some"
" degree. Bad actors in the mining community can for example run a casino "
"payout function on a chosen hash and just retry a different hash if they "
"did not receive any money."
msgstr ""

#: ../../units-and-global-variables.rst:110 ab2f4c94731c402b918dccbd1618f250
msgid ""
"The current block timestamp must be strictly larger than the timestamp of"
" the last block, but the only guarantee is that it will be somewhere "
"between the timestamps of two consecutive blocks in the canonical chain."
msgstr ""

#: ../../units-and-global-variables.rst:115 f5223b03ca9d4e3d86b1363aa6143be2
msgid ""
"The block hashes are not available for all blocks for scalability "
"reasons. You can only access the hashes of the most recent 256 blocks, "
"all other values will be zero."
msgstr ""

#: ../../units-and-global-variables.rst:120 f94cfa97b72b4cac8a5c25ebe8eb2feb
msgid ""
"The function ``blockhash`` was previously known as ``block.blockhash``, "
"which was deprecated in version 0.4.22 and removed in version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:124 13e6cb2023a44a2dbfe44d03ef8b12a5
msgid ""
"The function ``gasleft`` was previously known as ``msg.gas``, which was "
"deprecated in version 0.4.21 and removed in version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:128 63e7593a8c364a369403cb2bf6584e47
msgid "In version 0.7.0, the alias ``now`` (for ``block.timestamp``) was removed."
msgstr ""

#: ../../units-and-global-variables.rst:133 7107cd2399ae42c781ee33bb46b601a0
msgid "ABI Encoding and Decoding Functions"
msgstr ""

#: ../../units-and-global-variables.rst:135 38fc5ad3ec2e4b70b55cf458b7044e53
msgid ""
"``abi.decode(bytes memory encodedData, (...)) returns (...)``: ABI-"
"decodes the given data, while the types are given in parentheses as "
"second argument. Example: ``(uint a, uint[2] memory b, bytes memory c) = "
"abi.decode(data, (uint, uint[2], bytes))``"
msgstr ""

#: ../../units-and-global-variables.rst:136 b64f7fd776c74dd7b3fd25a5b69d7e5d
msgid ""
"``abi.encode(...) returns (bytes memory)``: ABI-encodes the given "
"arguments"
msgstr ""

#: ../../units-and-global-variables.rst:137 138bb21c26b941f39e9dfa80834f177e
msgid ""
"``abi.encodePacked(...) returns (bytes memory)``: Performs :ref:`packed "
"encoding <abi_packed_mode>` of the given arguments. Note that packed "
"encoding can be ambiguous!"
msgstr ""

#: ../../units-and-global-variables.rst:138 257beb2c6abe4859a10dd4a60fd45d1c
msgid ""
"``abi.encodeWithSelector(bytes4 selector, ...) returns (bytes memory)``: "
"ABI-encodes the given arguments starting from the second and prepends the"
" given four-byte selector"
msgstr ""

#: ../../units-and-global-variables.rst:139 9f7230fc9db148ef9ca45b260053e947
msgid ""
"``abi.encodeWithSignature(string memory signature, ...) returns (bytes "
"memory)``: Equivalent to "
"``abi.encodeWithSelector(bytes4(keccak256(bytes(signature))), ...)``"
msgstr ""

#: ../../units-and-global-variables.rst:140 0eb1ad7aa034458683ee4f48c17b5a59
msgid ""
"``abi.encodeCall(function functionPointer, (...)) returns (bytes "
"memory)``: ABI-encodes a call to ``functionPointer`` with the arguments "
"found in the tuple. Performs a full type-check, ensuring the types match "
"the function signature. Result equals "
"``abi.encodeWithSelector(functionPointer.selector, (...))``"
msgstr ""

#: ../../units-and-global-variables.rst:143 0870a59343dc4059a162ae917fb5b7c7
msgid ""
"These encoding functions can be used to craft data for external function "
"calls without actually calling an external function. Furthermore, "
"``keccak256(abi.encodePacked(a, b))`` is a way to compute the hash of "
"structured data (although be aware that it is possible to craft a \"hash "
"collision\" using different function parameter types)."
msgstr ""

#: ../../units-and-global-variables.rst:148 c8275b76f8e54a5b876d8e129dd534d5
msgid ""
"See the documentation about the :ref:`ABI <ABI>` and the :ref:`tightly "
"packed encoding <abi_packed_mode>` for details about the encoding."
msgstr ""

#: ../../units-and-global-variables.rst:154 a8ede9a5381f471db59ab44fd2b3d8c1
msgid "Members of bytes"
msgstr ""

#: ../../units-and-global-variables.rst:156 860c7e8e75534e38ab9e5aa683b217bd
msgid ""
"``bytes.concat(...) returns (bytes memory)``: :ref:`Concatenates variable"
" number of bytes and bytes1, ..., bytes32 arguments to one byte array"
"<bytes-concat>`"
msgstr ""

#: ../../units-and-global-variables.rst:161 75276042b56a4c8a9f7b4afbc4f8cfa1
msgid "Members of string"
msgstr ""

#: ../../units-and-global-variables.rst:163 37f169fcaef447698ccae479d5cd70f7
msgid ""
"``string.concat(...) returns (string memory)``: :ref:`Concatenates "
"variable number of string arguments to one string array<string-concat>`"
msgstr ""

#: ../../units-and-global-variables.rst:169 23fc235c35ea4f53b42413e95c70d442
msgid "Error Handling"
msgstr ""

#: ../../units-and-global-variables.rst:171 41305e6004c24b5f80b0649d4bb090c0
msgid ""
"See the dedicated section on :ref:`assert and require<assert-and-"
"require>` for more details on error handling and when to use which "
"function."
msgstr ""

#: ../../units-and-global-variables.rst:175 89124f5487d94edab07dcf1ea3dea6b5
msgid "``assert(bool condition)``"
msgstr ""

#: ../../units-and-global-variables.rst:175 d265caabd8eb4278985dace3fb5c42fd
msgid ""
"causes a Panic error and thus state change reversion if the condition is "
"not met - to be used for internal errors."
msgstr ""

#: ../../units-and-global-variables.rst:178 495c88c3ccf6403b811dacc069e38172
msgid "``require(bool condition)``"
msgstr ""

#: ../../units-and-global-variables.rst:178 a1a6b3e694a6498685839c3bfae7235e
msgid ""
"reverts if the condition is not met - to be used for errors in inputs or "
"external components."
msgstr ""

#: ../../units-and-global-variables.rst:181 2d6fa471e6564d8b94fc9918ec961754
msgid "``require(bool condition, string memory message)``"
msgstr ""

#: ../../units-and-global-variables.rst:181 bed883a8df2f46f9ad168e87a28c5518
msgid ""
"reverts if the condition is not met - to be used for errors in inputs or "
"external components. Also provides an error message."
msgstr ""

#: ../../units-and-global-variables.rst:184 59f1c1e3219d440fa3bf823d05c1990f
msgid "``revert()``"
msgstr ""

#: ../../units-and-global-variables.rst:184 39bb8725dc5d463295633177496ac48f
msgid "abort execution and revert state changes"
msgstr ""

#: ../../units-and-global-variables.rst:187 971865c2377a42c7bb16bf7da998af1b
msgid "``revert(string memory reason)``"
msgstr ""

#: ../../units-and-global-variables.rst:187 d656775b597b44958912d3930c2dd33f
msgid "abort execution and revert state changes, providing an explanatory string"
msgstr ""

#: ../../units-and-global-variables.rst:194 8e6c3b3418c9423e91c115db7d4222bf
msgid "Mathematical and Cryptographic Functions"
msgstr ""

#: ../../units-and-global-variables.rst:197 d434bbe2b3d54f299fda461cc44ade63
msgid "``addmod(uint x, uint y, uint k) returns (uint)``"
msgstr ""

#: ../../units-and-global-variables.rst:197 3b14d62164ee4d798a17ed0e42be96af
msgid ""
"compute ``(x + y) % k`` where the addition is performed with arbitrary "
"precision and does not wrap around at ``2**256``. Assert that ``k != 0`` "
"starting from version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:200 bdd2c234f91547c7acd7f6d57ca6f597
msgid "``mulmod(uint x, uint y, uint k) returns (uint)``"
msgstr ""

#: ../../units-and-global-variables.rst:200 07731ec6034c400c9da278f9585b2273
msgid ""
"compute ``(x * y) % k`` where the multiplication is performed with "
"arbitrary precision and does not wrap around at ``2**256``. Assert that "
"``k != 0`` starting from version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:203 10f7b80fa09c4affa95d25146ab7a5d4
msgid "``keccak256(bytes memory) returns (bytes32)``"
msgstr ""

#: ../../units-and-global-variables.rst:203 516b1503abc645cea65412e61a290b30
msgid "compute the Keccak-256 hash of the input"
msgstr ""

#: ../../units-and-global-variables.rst:207 1c8e9ea38d9d411eb9723e3d049ce901
msgid ""
"There used to be an alias for ``keccak256`` called ``sha3``, which was "
"removed in version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:210 e8adc7f81b504771ba6dfe2ecab33b1c
msgid "``sha256(bytes memory) returns (bytes32)``"
msgstr ""

#: ../../units-and-global-variables.rst:210 9ac5f000944946dbb9cb9e6c3d93457e
msgid "compute the SHA-256 hash of the input"
msgstr ""

#: ../../units-and-global-variables.rst:213 cc8f5632e60447aba059488cdc451f57
msgid "``ripemd160(bytes memory) returns (bytes20)``"
msgstr ""

#: ../../units-and-global-variables.rst:213 405bc65627914f47be217fd45b08b9cc
msgid "compute RIPEMD-160 hash of the input"
msgstr ""

#: ../../units-and-global-variables.rst:226 e44d22b02067417f98194d062af12780
msgid ""
"``ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns "
"(address)``"
msgstr ""

#: ../../units-and-global-variables.rst:216 386916ad42ff40198d2a35ee4556448f
msgid ""
"recover the address associated with the public key from elliptic curve "
"signature or return zero on error. The function parameters correspond to "
"ECDSA values of the signature:"
msgstr ""

#: ../../units-and-global-variables.rst:219 b941f07b98cb4310aa6e2c03d2853b85
msgid "``r`` = first 32 bytes of signature"
msgstr ""

#: ../../units-and-global-variables.rst:220 6dd5c57e9c5a42da99a5db0899fa74b9
msgid "``s`` = second 32 bytes of signature"
msgstr ""

#: ../../units-and-global-variables.rst:221 2a1be590d4394ab98007e05a057a9d59
msgid "``v`` = final 1 byte of signature"
msgstr ""

#: ../../units-and-global-variables.rst:223 eb87760a9c884b81b9244b8984c416b5
msgid ""
"``ecrecover`` returns an ``address``, and not an ``address payable``. See"
" :ref:`address payable<address>` for conversion, in case you need to "
"transfer funds to the recovered address."
msgstr ""

#: ../../units-and-global-variables.rst:226 5cb23787764d4865883016b558100313
msgid ""
"For further details, read `example usage "
"<https://ethereum.stackexchange.com/questions/1777/workflow-on-signing-a"
"-string-with-private-key-followed-by-signature-verificatio>`_."
msgstr ""

#: ../../units-and-global-variables.rst:230 34db7ce4079942b4a064a74fcac13a24
msgid ""
"If you use ``ecrecover``, be aware that a valid signature can be turned "
"into a different valid signature without requiring knowledge of the "
"corresponding private key. In the Homestead hard fork, this issue was "
"fixed for _transaction_ signatures (see `EIP-2 "
"<https://eips.ethereum.org/EIPS/eip-2#specification>`_), but the "
"ecrecover function remained unchanged."
msgstr ""

#: ../../units-and-global-variables.rst:235 c740a50542c448628c055aa0d1e212a8
msgid ""
"This is usually not a problem unless you require signatures to be unique "
"or use them to identify items. OpenZeppelin have a `ECDSA helper library "
"<https://docs.openzeppelin.com/contracts/4.x/api/utils#ECDSA>`_ that you "
"can use as a wrapper for ``ecrecover`` without this issue."
msgstr ""

#: ../../units-and-global-variables.rst:240 2dda3d9f3d3140d7ab01d0e20ef2c908
msgid ""
"When running ``sha256``, ``ripemd160`` or ``ecrecover`` on a *private "
"blockchain*, you might encounter Out-of-Gas. This is because these "
"functions are implemented as \"precompiled contracts\" and only really "
"exist after they receive the first message (although their contract code "
"is hardcoded). Messages to non-existing contracts are more expensive and "
"thus the execution might run into an Out-of-Gas error. A workaround for "
"this problem is to first send Wei (1 for example) to each of the "
"contracts before you use them in your actual contracts. This is not an "
"issue on the main or test net."
msgstr ""

#: ../../units-and-global-variables.rst:247 7105531e9af04ffebd2aedf38cdae5cb
msgid "Members of Address Types"
msgstr ""

#: ../../units-and-global-variables.rst:250 764d44fb8c0d497c874bbdf828e0c2d8
msgid "``<address>.balance`` (``uint256``)"
msgstr ""

#: ../../units-and-global-variables.rst:250 3a2350f2a48a4244a50b0d7f9053a1bc
msgid "balance of the :ref:`address` in Wei"
msgstr ""

#: ../../units-and-global-variables.rst:253 e0ee83f82fd14229944a5f627d9d885a
msgid "``<address>.code`` (``bytes memory``)"
msgstr ""

#: ../../units-and-global-variables.rst:253 0936680ae7414049936c3e7963b3fa7b
msgid "code at the :ref:`address` (can be empty)"
msgstr ""

#: ../../units-and-global-variables.rst:256 5f50948dbc2e401ba2c92c623a9d14dc
msgid "``<address>.codehash`` (``bytes32``)"
msgstr ""

#: ../../units-and-global-variables.rst:256 ec29bb789d0a4e2ebfe9bc7d2f8d3ba4
msgid "the codehash of the :ref:`address`"
msgstr ""

#: ../../units-and-global-variables.rst:259 db7372e441014ec6a344842b2e8e606c
msgid "``<address payable>.transfer(uint256 amount)``"
msgstr ""

#: ../../units-and-global-variables.rst:259 12b4564abfe94b9aa8827afe5aa42eec
msgid ""
"send given amount of Wei to :ref:`address`, reverts on failure, forwards "
"2300 gas stipend, not adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:262 f20c53d4d0604a71b2bfa45ce171f09b
msgid "``<address payable>.send(uint256 amount) returns (bool)``"
msgstr ""

#: ../../units-and-global-variables.rst:262 86e9f6d31b0e4c5a9074719b075b10c6
msgid ""
"send given amount of Wei to :ref:`address`, returns ``false`` on failure,"
" forwards 2300 gas stipend, not adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:265 b105cb9999e940ae9abf9142a3a962aa
msgid "``<address>.call(bytes memory) returns (bool, bytes memory)``"
msgstr ""

#: ../../units-and-global-variables.rst:265 fa1ebcda22824b949aabd76ed58cd463
msgid ""
"issue low-level ``CALL`` with the given payload, returns success "
"condition and return data, forwards all available gas, adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:268 72c4df001ff84de88aacddcb7d6bda0b
msgid "``<address>.delegatecall(bytes memory) returns (bool, bytes memory)``"
msgstr ""

#: ../../units-and-global-variables.rst:268 893a26c9e6a54b859b2ece796eb9a11e
msgid ""
"issue low-level ``DELEGATECALL`` with the given payload, returns success "
"condition and return data, forwards all available gas, adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:271 d74343e7b0c94d57b3fd8fe41426cf85
msgid "``<address>.staticcall(bytes memory) returns (bool, bytes memory)``"
msgstr ""

#: ../../units-and-global-variables.rst:271 31442e7e8f364e349e4a905f6cc10135
msgid ""
"issue low-level ``STATICCALL`` with the given payload, returns success "
"condition and return data, forwards all available gas, adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:273 e347d54ef607425aa3c42fc2c444f8a7
msgid "For more information, see the section on :ref:`address`."
msgstr ""

#: ../../units-and-global-variables.rst:276 a6f9834a072e41498f11c45084699153
msgid ""
"You should avoid using ``.call()`` whenever possible when executing "
"another contract function as it bypasses type checking, function "
"existence check, and argument packing."
msgstr ""

#: ../../units-and-global-variables.rst:280 beb833de3a954dc380e4145bd620e13c
msgid ""
"There are some dangers in using ``send``: The transfer fails if the call "
"stack depth is at 1024 (this can always be forced by the caller) and it "
"also fails if the recipient runs out of gas. So in order to make safe "
"Ether transfers, always check the return value of ``send``, use "
"``transfer`` or even better: Use a pattern where the recipient withdraws "
"the money."
msgstr ""

#: ../../units-and-global-variables.rst:286 72f7b07734624d3889a89c4b75f569ea
msgid ""
"Due to the fact that the EVM considers a call to a non-existing contract "
"to always succeed, Solidity includes an extra check using the "
"``extcodesize`` opcode when performing external calls. This ensures that "
"the contract that is about to be called either actually exists (it "
"contains code) or an exception is raised."
msgstr ""

#: ../../units-and-global-variables.rst:291 856b8c8d71dc41fc91f8148a8677c480
msgid ""
"The low-level calls which operate on addresses rather than contract "
"instances (i.e. ``.call()``, ``.delegatecall()``, ``.staticcall()``, "
"``.send()`` and ``.transfer()``) **do not** include this check, which "
"makes them cheaper in terms of gas but also less safe."
msgstr ""

#: ../../units-and-global-variables.rst:296 99d73f1134bc48e69189b04818270156
msgid ""
"Prior to version 0.5.0, Solidity allowed address members to be accessed "
"by a contract instance, for example ``this.balance``. This is now "
"forbidden and an explicit conversion to address must be done: "
"``address(this).balance``."
msgstr ""

#: ../../units-and-global-variables.rst:300 46dd4fc145ab42e29cc575e26945d5ea
msgid ""
"If state variables are accessed via a low-level delegatecall, the storage"
" layout of the two contracts must align in order for the called contract "
"to correctly access the storage variables of the calling contract by "
"name. This is of course not the case if storage pointers are passed as "
"function arguments as in the case for the high-level libraries."
msgstr ""

#: ../../units-and-global-variables.rst:306 9824f5548b634990a2be79b06bbbcfb6
msgid ""
"Prior to version 0.5.0, ``.call``, ``.delegatecall`` and ``.staticcall`` "
"only returned the success condition and not the return data."
msgstr ""

#: ../../units-and-global-variables.rst:310 b0e50a0eff284b85a509951c8bc5f39f
msgid ""
"Prior to version 0.5.0, there was a member called ``callcode`` with "
"similar but slightly different semantics than ``delegatecall``."
msgstr ""

#: ../../units-and-global-variables.rst:317 b74a56a6a7e8458f896a2076a0f8e631
msgid "Contract Related"
msgstr ""

#: ../../units-and-global-variables.rst:320 af9502ef5fce4499859083e0c35e8c91
msgid "``this`` (current contract's type)"
msgstr ""

#: ../../units-and-global-variables.rst:320 ac42f487d84f40c38e441a441f21491b
msgid "the current contract, explicitly convertible to :ref:`address`"
msgstr ""

#: ../../units-and-global-variables.rst:328 20aac27e1aaa462e8fdfb0fac906d4f4
msgid "``selfdestruct(address payable recipient)``"
msgstr ""

#: ../../units-and-global-variables.rst:323 e64b3908ca474b34bd2315bea57b90ae
msgid ""
"Destroy the current contract, sending its funds to the given "
":ref:`address` and end execution. Note that ``selfdestruct`` has some "
"peculiarities inherited from the EVM:"
msgstr ""

#: ../../units-and-global-variables.rst:327 1142e6c5e1d44a42a70faea61032fb82
msgid "the receiving contract's receive function is not executed."
msgstr ""

#: ../../units-and-global-variables.rst:328 d875777aba024194b379572399cddea0
msgid ""
"the contract is only really destroyed at the end of the transaction and "
"``revert`` s might \"undo\" the destruction."
msgstr ""

#: ../../units-and-global-variables.rst:330 414dc3f8139b430887941bb7b4c756e5
msgid ""
"Furthermore, all functions of the current contract are callable directly "
"including the current function."
msgstr ""

#: ../../units-and-global-variables.rst:333 6b588791176f48328893d70489b960c7
msgid ""
"From version 0.8.18 and up, the use of ``selfdestruct`` in both Solidity "
"and Yul will trigger a deprecation warning, since the ``SELFDESTRUCT`` "
"opcode will eventually undergo breaking changes in behaviour as stated in"
" `EIP-6049 <https://eips.ethereum.org/EIPS/eip-6049>`_."
msgstr ""

#: ../../units-and-global-variables.rst:338 63a33500ff944df7944e1adfdb2373e0
msgid ""
"Prior to version 0.5.0, there was a function called ``suicide`` with the "
"same semantics as ``selfdestruct``."
msgstr ""

#: ../../units-and-global-variables.rst:346 8440e97f63ef4594a9cd2747f69408df
msgid "Type Information"
msgstr ""

#: ../../units-and-global-variables.rst:348 1ded1ed6399a4cbaaafb89f5ab7ca15a
msgid ""
"The expression ``type(X)`` can be used to retrieve information about the "
"type ``X``. Currently, there is limited support for this feature (``X`` "
"can be either a contract or an integer type) but it might be expanded in "
"the future."
msgstr ""

#: ../../units-and-global-variables.rst:352 b255e1481fe04f5dbb673ef3c068b76b
msgid "The following properties are available for a contract type ``C``:"
msgstr ""

#: ../../units-and-global-variables.rst:355 7a81e0eb01ba464cb7b3430d2a945458
msgid "``type(C).name``"
msgstr ""

#: ../../units-and-global-variables.rst:355 b1c916af989d4ca3964840868727676d
msgid "The name of the contract."
msgstr ""

#: ../../units-and-global-variables.rst:363 e870f44e3e69439584489fc5b87e2c6b
msgid "``type(C).creationCode``"
msgstr ""

#: ../../units-and-global-variables.rst:358 bfc2c835fa41431abe7b9587d98f85a8
msgid ""
"Memory byte array that contains the creation bytecode of the contract. "
"This can be used in inline assembly to build custom creation routines, "
"especially by using the ``create2`` opcode. This property can **not** be "
"accessed in the contract itself or any derived contract. It causes the "
"bytecode to be included in the bytecode of the call site and thus "
"circular references like that are not possible."
msgstr ""

#: ../../units-and-global-variables.rst:373 94b586e7686c40258dc5e29bbefc884d
msgid "``type(C).runtimeCode``"
msgstr ""

#: ../../units-and-global-variables.rst:366 7c98f55217224f319b4d05a251a043a9
msgid ""
"Memory byte array that contains the runtime bytecode of the contract. "
"This is the code that is usually deployed by the constructor of ``C``. If"
" ``C`` has a constructor that uses inline assembly, this might be "
"different from the actually deployed bytecode. Also note that libraries "
"modify their runtime bytecode at time of deployment to guard against "
"regular calls. The same restrictions as with ``.creationCode`` also apply"
" for this property."
msgstr ""

#: ../../units-and-global-variables.rst:375 b303a4bb1c784ea9af884cbff3c73381
msgid ""
"In addition to the properties above, the following properties are "
"available for an interface type ``I``:"
msgstr ""

#: ../../units-and-global-variables.rst:381 0ae50cb5b01540e6b1834196cdf62623
msgid "``type(I).interfaceId``:"
msgstr ""

#: ../../units-and-global-variables.rst:379 41bbca8a455140d98beb2950a7056826
msgid ""
"A ``bytes4`` value containing the `EIP-165 "
"<https://eips.ethereum.org/EIPS/eip-165>`_ interface identifier of the "
"given interface ``I``. This identifier is defined as the ``XOR`` of all "
"function selectors defined within the interface itself - excluding all "
"inherited functions."
msgstr ""

#: ../../units-and-global-variables.rst:383 7285fea3bf8c4a589bd09011f93c10d1
msgid "The following properties are available for an integer type ``T``:"
msgstr ""

#: ../../units-and-global-variables.rst:386 cdf76d2dba57481c84d84e074a562990
msgid "``type(T).min``"
msgstr ""

#: ../../units-and-global-variables.rst:386 e52524ecd54d43ac962b4c47dac0869b
msgid "The smallest value representable by type ``T``."
msgstr ""

#: ../../units-and-global-variables.rst:389 46e3f476a0c8449f9fd3d3229ce11bfb
msgid "``type(T).max``"
msgstr ""

#: ../../units-and-global-variables.rst:389 1c5974d49d104fd698a8d696923de58c
msgid "The largest value representable by type ``T``."
msgstr ""

#: ../../units-and-global-variables.rst:392 8db2558c6472499f9ea524ff0d2cc172
msgid "Reserved Keywords"
msgstr ""

#: ../../units-and-global-variables.rst:394 983e078253e044968142bc8d42d96295
msgid ""
"These keywords are reserved in Solidity. They might become part of the "
"syntax in the future:"
msgstr ""

#: ../../units-and-global-variables.rst:396 9928cb77cf8b47ceb1962562f4f05b98
msgid ""
"``after``, ``alias``, ``apply``, ``auto``, ``byte``, ``case``, "
"``copyof``, ``default``, ``define``, ``final``, ``implements``, ``in``, "
"``inline``, ``let``, ``macro``, ``match``, ``mutable``, ``null``, ``of``,"
" ``partial``, ``promise``, ``reference``, ``relocatable``, ``sealed``, "
"``sizeof``, ``static``, ``supports``, ``switch``, ``typedef``, "
"``typeof``, ``var``."
msgstr ""

